name: todo-flask-workflow

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: sprints-cluster-0
  MONGO_URI: 'mongodb://mongodb:27017/'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}

jobs:
  unit_testing:
    name: unit_testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10', '3.11' ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: ${{ matrix.python-version }} }
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-flask
      - name: Run Tests
        run: pytest --tb=short

  code-coverage:
    name: code-coverage
    needs: unit_testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Check Code Coverage
        continue-on-error: true
        run: pytest --cov=app --cov-report=html --cov-report=xml

  docker:
    name: containerization
    needs: [ unit_testing, code-coverage ]
    permissions:
      packages: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Docker Login (Docker Hub)
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Login (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/todoapp:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/todoapp:${{ github.sha }}

      - name: Test Docker Image
        run: |
          docker run --name todoapp -d \
            -p 5001:5000 \
            -e MONGO_URI="$MONGO_URI" \
            -e MONGO_USERNAME="$MONGO_USERNAME" \
            -e MONGO_PASSWORD="$MONGO_PASSWORD" \
            ${{ env.DOCKERHUB_USERNAME }}/todoapp:${{ github.sha }}
          echo "Waiting for app..."
          sleep 12
          curl -fsS 127.0.0.1:5001/healthz

  terraform:
    name: terraform-deployment
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.6.6 }
      - name: Terraform Init
        working-directory: ./Terraform/team1
        run: terraform init
      - name: Terraform Plan
        working-directory: ./Terraform/team1
        run: terraform plan
      - name: Terraform Apply
        working-directory: ./Terraform/team1
        run: terraform apply -auto-approve

  deploy:
    name: deploy to EKS
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME

      - name: Deploy K8s Manifests
        working-directory: ./k8s
        run: |
          kubectl apply -f mongodb.yml
          kubectl apply -f deployment.yml
          kubectl apply -f service.yml
          kubectl rollout status deployment/microservice --timeout=5m
          kubectl get pods -o wide
          kubectl get svc

  deploy-monitoring:
    name: monitoring
    needs: deploy
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      EKS_CLUSTER_NAME: sprints-cluster-0
      GRAFANA_ADMIN_PASSWORD: ${{ secrets.grafana_admin_password }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME

      - name: Install Helm + envsubst
        run: |
          sudo apt-get update -y
          sudo apt-get install -y helm gettext-base

      - name: Create monitoring namespace (idempotent)
        run: kubectl create namespace monitoring || true

      - name: Add Helm repos
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Render values with env
        working-directory: ./k8s
        run: |
          envsubst < values.yml > /tmp/values.rendered.yml
          echo "Rendered values:"
          tail -n +1 /tmp/values.rendered.yml

      - name: Install/Upgrade kube-prometheus-stack
        run: |
          helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --values /tmp/values.rendered.yml \
            --wait --timeout 15m

      - name: Apply ServiceMonitor for my app
        working-directory: ./k8s
        run: kubectl apply -f servicemonitor.yml

      - name: Show external endpoints
        run: |
          kubectl -n monitoring wait --for=condition=available deploy/kube-prometheus-stack-grafana --timeout=10m
          kubectl -n monitoring get svc -o wide
          echo "Grafana:"
          kubectl -n monitoring get svc kube-prometheus-stack-grafana -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}{"\n"}'
          echo "Prometheus:"
          kubectl -n monitoring get svc kube-prometheus-stack-prometheus -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}{"\n"}'
